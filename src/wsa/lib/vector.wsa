include memory
include memcontainer

jump lib_vector_end

; args capacity
; returns &V
label vector_new
  add 1
  call memcontainer_new
  dup

  ; set length to 0
  retrieve
  push 0
  store
ret

; args &V
label vector_destroy
  call memcontainer_destroy
ret

; args &V length value
label vector_fill
  copy 2
  copy 2
  add 1
  call memcontainer_ensure_capacity

  copy 2
  retrieve
  add 1
  ; [&V,length,value,&D]
  swap
  copy 2
  ; [&V,length,&D,value,size]
  call memset

  ; [&V,length]
  call vector_truncate ; aka set_length
ret

; args &V
; returns &data
label vector_get_addr
  retrieve
  add 1
ret

; args &V
; returns capacity
label vector_get_capacity
  call memcontainer_get_capacity
ret

; args &V
; returns length
label vector_get_length
  retrieve
  retrieve
ret

; args &V length
; aka set_length
label vector_truncate
  swap
  retrieve
  swap
  store
ret

; args &V value
label vector_push
  swap
  dup
  call vector_get_length
  add 1
  copy 1
  copy 1
  add 1
  call memcontainer_ensure_capacity

  ; [value, &V, len+1]
  copy 1
  retrieve
  copy 1
  store

  ; [value, &V, len+1]
  sub 1
  swap
  call vector_get_addr
  add
  swap
  store
ret

; args &V
; returns value
label vector_pop
  dup
  call vector_get_length
  sub 1
  copy 1
  call vector_get_addr
  copy 1
  add
  retrieve
  ; [&V, len-1, value]
  copy 1
  ; in case of out-of-bounds we don't have exceptions :( undefined behaviour, but keep length to 0 to avoid other complications
  jumpn __vector_pop_exit
    copy 2
    retrieve
    copy 2
    store
  label __vector_pop_exit
  slide 2
ret


; args: &V offset length
; returns &Vslice
label vector_slice
  dup
  dup
  div 2
  add
  call vector_new
  ; [&V,offset,length,&Vslice]
  ; memcpy args: source, dest, size
  copy 3
  call vector_get_addr
  copy 3
  add
  copy 1
  call vector_get_addr
  copy 3
  call memcpy

  dup
  copy 2
  call vector_truncate ; aka set length
  slide 3
ret

; args &Vtarget &Vsrc
label vector_push_all
  copy 1
  call vector_get_length
  copy 1
  call vector_get_length
  add
  dup
  copy 3
  swap
  call memcontainer_ensure_capacity

  ; [&V,&Vsrc,len]
  ; memcpy args: source, dest, size
  copy 1
  dup
  call vector_get_addr
  swap
  call vector_get_length
  ; [&V,&Vsrc,len,&src,size]
  copy 4
  dup
  call vector_get_addr
  swap
  call vector_get_length
  add
  swap
  call memcpy

  ; [&V,&Vsrc,len]
  slide 1
  call vector_truncate ; aka set length
ret

; args &V offset length
; returns &Vspliced
label vector_splice
  copy 2
  call vector_get_capacity
  call vector_new
  ; [&V,offset,len,&Vspliced]
  ; memcpy args: source, dest, size
  copy 3
  call vector_get_addr
  copy 1
  call vector_get_addr
  copy 4
  call memcpy

  copy 2
  copy 2
  add
  ; [&V,offset,len,&Vspliced,start]
  dup
  copy 5
  call vector_get_addr
  add
  ; [&V,offset,len,&Vspliced,start,&src]
  copy 2
  call vector_get_addr
  copy 5
  add
  ; [&V,offset,len,&Vspliced,start,&src,&dest]
  copy 6
  call vector_get_length
  copy 3
  sub
  call memcpy
  pop
  ; [&V,offset,len,&Vspliced]

  dup
  copy 4
  call vector_get_length
  copy 3
  sub
  call vector_truncate ; aka set length

  slide 3
ret

label lib_vector_end
