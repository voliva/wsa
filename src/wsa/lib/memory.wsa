valueinteger _STACK_HEAD 0
valueinteger _HEAP_HEAD 4294967294

label memory_init
push 1
store _STACK_HEAD
ret

; arg: size
label malloc
retrive _HEAP_HEAD
doub
jumpz malloc_empty
; todo
pop
push 121

jump malloc_end
label malloc_empty
pop

; head = _HEAP_HEAD - `size`
push _HEAP_HEAD
retrive -0
sub
doub
store +1
; size = `size`
retrive -0
store +2
; prev = _HEAP_HEAD
push _HEAP_HEAD
store +3
; next = 0
push 0
store +4
; Perform call
retrive _STACK_HEAD
add 4
store _STACK_HEAD
call malloc_allocate
pop
; In stack we have the head of the element, because of the doub performed after calculating it

label malloc_end
; Assuming we have addr of head on stack
add 2

retrive _STACK_HEAD
sub 1
store _STACK_HEAD
ret

; arg: head, size, prev, next
label malloc_allocate
; Store `next` to &`head`
retrive -3
retrive -0
store
; Store `size` to &`head`+1
retrive -3
add 1
retrive -2
store
; Store &`head` to &`prev`
retrive -1
retrive -3
store
; Return void
push 0

retrive _STACK_HEAD
sub 4
store _STACK_HEAD
ret
